import os
import sys
import math
import pygame
import tkinter as tk
from tkinter import *
import tkinter.messagebox as messagebox
import random
import json
import operator


Width = 623
Height = 300




def run_game():
   pygame.init()
   screen = pygame.display.set_mode((Width, Height))
   pygame.display.set_caption('Dino')


   class Dino:
       def __init__(self):
           self.width = 44
           self.height = 44
           self.x = 10
           self.y = 80
           self.texture_num = 0
           self.dy = 3
           self.onground = True
           self.jumping = False
           self.falling = False
           self.fall_stop = self.y
           self.velocity = 0
           self.gravity = 0.5
           self.jump_strength = -10
           self.set_texture()
           self.show()


       def update(self, loops):
           if not self.onground:
               self.velocity += self.gravity
               self.y += self.velocity


               if self.y >= Height - self.height - 65:
                   self.y = Height - self.height - 65
                   self.velocity = 0
                   self.onground = True
           elif loops % 8 == 0:
               self.texture_num = (self.texture_num + 1) % 3
               self.set_texture()


       def show(self):
           screen.blit(self.texture, (self.x, self.y))


       def set_texture(self):
           path = os.path.join(f'assets/Images/Noob{self.texture_num + 1}.png')
           image = pygame.image.load(path).convert_alpha()
           self.texture = pygame.transform.scale(image, (self.width, self.height))
           self.y = Height - self.height - 65


       def jump(self):
           if self.onground:
               self.velocity = self.jump_strength
               self.onground = False


   class BG:
       def __init__(self, x):
           self.width = Width
           self.height = Height
           self.x = x
           self.y = 0
           self.set_texture()


       def update(self, dx):
           self.x += dx
           if self.x <= -self.width:
               self.x += Width * 2


       def show(self):
           screen.blit(self.texture, (int(self.x), int(self.y)))


       def set_texture(self):
           path = os.path.join('assets/Images/BG.png')
           image = pygame.image.load(path)
           self.texture = pygame.transform.scale(image, (self.width, self.height))


   class Cactus:
       def __init__(self, x, value):
           self.width = 34
           self.height = 34
           self.x = x
           self.y = 80
           self.value = value
           self.font = pygame.font.SysFont('Times New Roman', 20)
           self.set_texture()
           self.show()


       def update(self, dx):
           self.x += dx


       def show(self):
           screen.blit(self.texture, (self.x, self.y))
           text = self.font.render(str(self.value), True, (0, 0, 0))
           text_rect = text.get_rect(center=(self.x + self.width // 2, self.y - 10))
           screen.blit(text, text_rect)


       def set_texture(self):
           path = os.path.join('assets/Images/Obstacle.png')
           image = pygame.image.load(path).convert_alpha()
           self.texture = pygame.transform.scale(image, (self.width, self.height))
           self.y = Height - self.height - 70


   class Collision:


       def between(self, obj1, obj2):
           distance = math.sqrt((obj1.x - obj2.x) ** 2 + (obj1.y - obj2.y) ** 2)
           return distance < 30


   class Score:


       def __init__(self):
           self.act = 0
           self.font = pygame.font.SysFont('Times New Roman', 18)
           self.color = (0, 0, 0)
           self.show()


       def show(self):
           self.lbl = self.font.render(f' Score : {self.act}', 1, self.color)
           lbl_width = self.lbl.get_rect().width
           screen.blit(self.lbl, (Width - lbl_width - 10, 10))


       def reset(self):
           self.act = 0


   class Question:
       def __init__(self):
           self.font = pygame.font.SysFont('Times New Roman', 24)
           self.generate()


       def generate(self):
           self.a = random.randint(1, 10)
           self.b = random.randint(1, 10)
           self.answer = self.a + self.b
           self.question_text = f"{self.a} + {self.b}"


       def show(self):
           text_surface = self.font.render(self.question_text, True, (0, 0, 0))
           screen.blit(text_surface, (Width // 2 - text_surface.get_width() // 2, 20))


   class Game:
       def __init__(self):
           self.bg = [BG(x=0), BG(x=Width)]
           self.dino = Dino()
           self.obstacles = []
           self.collision = Collision()
           self.score = Score()
           self.speed = 3
           self.playing = False
           self.question = Question()
          
          
           self.correct_answer_probability = 0.3  
           self.obstacles_since_last_correct = 0  
           self.max_obstacles_before_guaranteed = 5  
           self.set_labels()




       def set_labels(self):
           big_font = pygame.font.SysFont('Times New Roman', 24, bold=True)
           small_font = pygame.font.SysFont('Times New Roman', 18)
           self.big_lbl_over = big_font.render(f'G A M E O V E R', 1, (0, 0, 0))
           self.small_lbl = small_font.render(f'press R to restart', 1, (0, 0, 0))
           self.big_lbl_start = big_font.render(f'Press Space to Start', 1, (0, 0, 0))


       def start(self):
           self.playing = True


       def over(self):
           screen.blit(self.big_lbl_over, (Width // 2 - self.big_lbl_over.get_width() // 2, Height // 4))
           screen.blit(self.small_lbl, (Width // 2 - self.small_lbl.get_width() // 2, Height // 2))
           self.playing = False


       def begin(self):
           screen.blit(self.big_lbl_start, (Width // 2 - self.big_lbl_start.get_width() // 2, Height // 4))


       def tospawn(self, loops):
           return loops % 100 == 0


       def spawn_cactus(self):
           
           should_spawn_correct = False
          
           
           if self.obstacles_since_last_correct >= self.max_obstacles_before_guaranteed:
               should_spawn_correct = True 
           else:
              
               should_spawn_correct = random.random() < self.correct_answer_probability
          
          
           correct_answer = self.question.answer
           min_incorrect = max(0, correct_answer - 2)
           max_incorrect = correct_answer + 2
          
          
           incorrect_options = []
           for num in range(min_incorrect, max_incorrect + 1):
               if num != correct_answer:
                   incorrect_options.append(num)
          
          
           num_cacti = random.randint(1, 3)
          
           for i in range(num_cacti):
             
               if len(self.obstacles) > 0:
                   prev_cactus = self.obstacles[-1]
                   x = random.randint(prev_cactus.x + self.dino.width + 84,
                                      Width + prev_cactus.x + self.dino.width + 84)
               else:
                   x = random.randint(Width + 100, 1000)
              
              
               if should_spawn_correct and i == 0:  
                   value = correct_answer
                   should_spawn_correct = False  
               else:
                  
                   value = random.choice(incorrect_options)
              
               cactus = Cactus(x=x, value=value)
               self.obstacles.append(cactus)
          
          
           correct_answer_spawned = False
           for cactus in self.obstacles[-num_cacti:]: 
               if cactus.value == correct_answer:
                   correct_answer_spawned = True
                   break
          
           if correct_answer_spawned:
              
               self.obstacles_since_last_correct = 0
               self.correct_answer_probability = 0.3
           else:
              
               self.obstacles_since_last_correct += 1
              
               self.correct_answer_probability = min(0.9, self.correct_answer_probability + 0.15)


       def restart(self):
           main()


   def main():
       game = Game()
       dino = game.dino


       clock = pygame.time.Clock()
       loops = 0
       over = False


       for bg in game.bg:
           bg.show()


           dino.show()
           game.begin()


           while True:


               if game.playing:


                   loops += 1


                   for bg in game.bg:
                       bg.update(-game.speed)
                       bg.show()


                   dino.update(loops)
                   dino.show()
                   game.question.show()


                   if game.tospawn(loops):
                       game.spawn_cactus()


                   
                   for cactus in game.obstacles[:]:  
                       if cactus.x < -50:  
                           if cactus.value == game.question.answer:
                              
                               game.obstacles_since_last_correct += 1
                               game.correct_answer_probability = min(0.9, game.correct_answer_probability + 0.2)
                           game.obstacles.remove(cactus)
                  
                   for cactus in game.obstacles:
                       cactus.update(-game.speed)
                       cactus.show()


                       if game.collision.between(dino, cactus):
                           if cactus.value == game.question.answer:
                               game.obstacles.remove(cactus)  
                               game.score.act += 10  
                               game.question.generate()
                              
                               game.obstacles.clear()
                              
                               game.obstacles_since_last_correct = 0
                               game.correct_answer_probability = 0.3
                               over = False
                           else:
                               over = True


                   if over:
                       game.over()




                   game.score.show()


               for event in pygame.event.get():
                   if event.type == pygame.QUIT:
                       pygame.quit()
                       sys.exit()
                   if event.type == pygame.KEYDOWN:
                       if event.key == pygame.K_SPACE:
                           if not over:
                               if dino.onground:
                                   dino.jump()


                               if not game.playing:
                                   game.start()


                       if event.key == pygame.K_r:
                           game.restart()
                           dino = game.dino
                           loops = 0
                           over = False


               pygame.display.update()
               clock.tick(80)


   main()




def validate_input(char):
   return char.isalpha()




def tkinter():
   root = tk.Tk()
   root.title("Dino Math Quiz")
   root.geometry("600x400")


   title_label = Label(root, text="MATH DINO GAME", font=("Times New Roman", 28, "bold"))
   title_label.pack(pady=40)


   username_label = Label(root, text="Enter your name:", font=("Times New Roman", 16))
   username_label.pack(pady=10)
   username_entry = Entry(root, font=("Times New Roman", 14), width=25)
   username_entry.pack(pady=10)


   def start_game():
       username = username_entry.get()
       if not username.isalpha():
           tk.messagebox.showwarning("Input Required", "Please enter your name before starting the game.")
       else:
           root.withdraw()  
           show_difficulty_selection(username, root)


   start = Button(root, text="Start Dino Math Quiz", font=("Times New Roman", 16, "bold"),
                 command=start_game, width=25, height=2)
   start.pack(pady=20)


   exit_button = Button(root, text="Exit", font=("Times New Roman", 14), command=root.destroy, width=15, height=2)
   exit_button.place(x=50, y=320)


   def show_instructions():
       instruction_window = tk.Toplevel(root)
       instruction_window.title("Instructions")
       instruction_window.geometry("500x400")
       Label(instruction_window,
             text="Solve the math question displayed at the top of the screen.\nEach cactus represents a possible answer.\nCollide with the cactus displaying the correct answer to score points.\nAvoid incorrect answers by jumping over them.\nBe quick and accurate to achieve the highest score!",
             font=("Times New Roman", 14), justify="left", wraplength=450).pack(pady=30)


   instruction_button = Button(root, text="Instructions", font=("Times New Roman", 14), command=show_instructions, width=15, height=2)
   instruction_button.place(x=450, y=320)


   def show_difficulty_selection(username, root):
       global diff_window
      
       try:
          
           diff_window.destroy()
       except:
           pass
      
      
       diff_window = tk.Toplevel()
       diff_window.title("Select Difficulty")
       diff_window.geometry("500x350")
       diff_window.resizable(False, False)
      
       
       diff_window.grid_columnconfigure(0, weight=1)
       diff_window.grid_columnconfigure(2, weight=1)
      
       
       main_frame = tk.Frame(diff_window)
       main_frame.grid(column=1, row=0, pady=20)
      
       
       title_label = tk.Label(main_frame, text="Select Difficulty", font=("Times New Roman", 24, "bold"))
       title_label.grid(column=0, row=0, pady=20)
      
       
       welcome_label = tk.Label(main_frame, text=f"Welcome, {username}!", font=("Times New Roman", 14))
       welcome_label.grid(column=0, row=1, pady=10)
      
      
       easy_button = tk.Button(main_frame, text="Easy", font=("Times New Roman", 16, "bold"),
                             bg='lightgreen', fg='black', width=15, height=2, command=select_easy)
       easy_button.grid(column=0, row=2, pady=10)
      
      
       medium_button = tk.Button(main_frame, text="Medium", font=("Times New Roman", 16, "bold"),
                               bg='orange', fg='black', width=15, height=2, command=select_medium)
       medium_button.grid(column=0, row=3, pady=10)
      
      
       hard_button = tk.Button(main_frame, text="Hard", font=("Times New Roman", 16, "bold"),
                             bg='red', fg='black', width=15, height=2, command=select_hard)
       hard_button.grid(column=0, row=4, pady=10)
      
      
       back_button = tk.Button(main_frame, text="Back", font=("Times New Roman", 12), command=close_diff_window)
       back_button.grid(column=0, row=5, pady=10)
  
   def select_easy():
       diff_window.destroy()
       root.destroy()
       run_game()
  
   def select_medium():
       tk.messagebox.showinfo("Medium Difficulty", "Medium difficulty coming soon!")
  
   def select_hard():
       tk.messagebox.showinfo("Hard Difficulty", "Hard difficulty coming soon!")
  
   def close_diff_window():
       diff_window.destroy()
       root.deiconify()  


   root.mainloop()




tkinter()
